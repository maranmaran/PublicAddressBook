// <auto-generated />
using System;
using Backend.Domain.Enum;
using Backend.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Backend.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Backend.Domain.Entities.Auditing.AuditRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("EntityType")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("text");

                    b.Property<bool>("Seen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Table")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryKey");

                    b.HasIndex("UserId");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Contacts.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Name", "Address")
                        .IsUnique();

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Contacts.PhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Media.MediaFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("text");

                    b.Property<string>("Filename")
                        .HasColumnType("text");

                    b.Property<string>("S3FilePath")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Notification.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("JsonEntity")
                        .HasColumnType("text");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<bool>("Read")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<string>("RedirectUrl")
                        .HasColumnType("text");

                    b.Property<string>("SenderAvatar")
                        .HasColumnType("text");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Subtype")
                        .HasColumnType("text");

                    b.Property<bool>("SystemNotification")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Backend.Domain.Entities.System.SystemLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("InnerException")
                        .HasColumnType("text");

                    b.Property<string>("LogLevel")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SystemLog");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Male");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<int>("TrialDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(15);

                    b.Property<Guid>("UserSettingId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserSettingId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("AccountType").HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d399c00-5654-4a54-9c2c-b44a485c3583"),
                            AccountType = "Admin",
                            Active = false,
                            CreatedOn = new DateTime(2020, 6, 9, 15, 0, 44, 442, DateTimeKind.Utc).AddTicks(5665),
                            CustomerId = "cus_FHk5RepADdfm5H",
                            Email = "user@application.com",
                            FirstName = "Firstname",
                            Gender = "Male",
                            LastModified = new DateTime(2020, 6, 9, 15, 0, 44, 442, DateTimeKind.Utc).AddTicks(5676),
                            LastName = "Lastname",
                            PasswordHash = "04f8996da763b7a969b1028ee3007569eaf3a635486ddab211d512c85b9df8fb",
                            TrialDuration = 0,
                            UserSettingId = new Guid("8d399c00-5684-4a54-9c2c-b44a485c3583"),
                            Username = "user"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.NotificationSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ReceiveMail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("ReceiveNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<Guid>("UserSettingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserSettingId");

                    b.ToTable("NotificationSetting");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c00"),
                            NotificationType = "MediaAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("0d528a91-fbbe-4a02-924a-792344bbbd65")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c01"),
                            NotificationType = "ContactChanged",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("0d528a91-fbbe-4a02-924a-792344bbbd65")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c10"),
                            NotificationType = "MediaAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("8d399c00-5684-4a54-9c2c-b44a485c3583")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c11"),
                            NotificationType = "ContactChanged",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("8d399c00-5684-4a54-9c2c-b44a485c3583")
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.UserSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2)
                        .HasDefaultValue("en");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Light");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UserSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d528a91-fbbe-4a02-924a-792344bbbd65"),
                            ApplicationUserId = new Guid("0faee6ac-1772-4bbe-9990-a7d9a22dd529"),
                            Theme = "Light"
                        },
                        new
                        {
                            Id = new Guid("8d399c00-5684-4a54-9c2c-b44a485c3583"),
                            ApplicationUserId = new Guid("8d399c00-5654-4a54-9c2c-b44a485c3583"),
                            Theme = "Light"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Admin", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.User.ApplicationUser");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0faee6ac-1772-4bbe-9990-a7d9a22dd529"),
                            AccountType = "Admin",
                            Active = false,
                            CreatedOn = new DateTime(2020, 6, 9, 15, 0, 44, 442, DateTimeKind.Utc).AddTicks(3848),
                            CustomerId = "cus_FLi7gZv8w0j0GB",
                            Email = "admin@trainingcompanion.com",
                            FirstName = "Admin",
                            Gender = "Male",
                            LastModified = new DateTime(2020, 6, 9, 15, 0, 44, 442, DateTimeKind.Utc).AddTicks(4225),
                            LastName = "",
                            PasswordHash = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",
                            TrialDuration = 0,
                            UserSettingId = new Guid("0d528a91-fbbe-4a02-924a-792344bbbd65"),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.Contacts.PhoneNumber", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Contacts.Contact", "Contact")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Media.MediaFile", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany("MediaFiles")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Notification.Notification", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.ApplicationUser", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.UserSetting", "UserSetting")
                        .WithOne("ApplicationUser")
                        .HasForeignKey("Backend.Domain.Entities.User.ApplicationUser", "UserSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.NotificationSetting", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.UserSetting", "UserSetting")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
